import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import MobileNetV2

IMG_SIZE = (224, 224)
BATCH_SIZE = 32

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    'dataset_split/train',
    image_size=IMG_SIZE, batch_size=BATCH_SIZE
)
val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    'dataset_split/val', image_size=IMG_SIZE, batch_size=BATCH_SIZE
)

base_model = MobileNetV2(input_shape=IMG_SIZE+(3,),
                         include_top=False,
                         weights='imagenet')
base_model.trainable = False

model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(train_ds.num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_ds,
                    validation_data=val_ds,
                    epochs=10)

import numpy as np
import seaborn as sns
from collections import Counter

all_labels = []
for _, labels in train_ds.unbatch():
    all_labels.append(labels.numpy())

label_counts = Counter(all_labels)
label_names = [class_names[i] for i in label_counts.keys()]
counts = list(label_counts.values())

plt.figure(figsize=(10,6))
sns.barplot(x=label_names, y=counts, palette="viridis")
plt.title("Class Distribution in Training Set")
plt.xlabel("Class Name")
plt.ylabel("Number of Images")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

base_model = MobileNetV2(input_shape=(224, 224, 3),
                         include_top=Ffrom tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import layers, models

# Load base model
alse,
                         weights='imagenet')
base_model.trainable = False  # Freeze layers

# Add custom classifier head
model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.3),
    layers.Dense(num_classes, activation='softmax')  # softmax for multi-class
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()


val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    "dataset_split/val",
    i
mage_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    label_mode='int'
num_classes = len(class_names)
print("Class names:", class_names))
IMG_SIZE = (224, 224)
BATCH_SIZE = 32

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    "dataset_split/train",
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    label_mode='int'
)
test_ds = tf.keras.preprocessing.image_dataset_from_directory(
    "dataset_split/test",
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    label_mode='int'
)

class_names = train_ds.class_names

def predict_single_image(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)  # Add batch dimension

    predictions = model.predict(img_array)
    predicted_class = class_names[np.argmax(predictions)]
    confidence = np.max(predictions)

    # Show image with prediction
    plt.imshow(img)
    plt.title(f"Prediction: {predicted_class} ({confidence*100:.2f}%)")
    plt.axis("off")
    plt.show()

    return predicted_class, confidence

# Example usage
predict_single_image("samples/rotten_banana.jpg")  # Replace with your image path
from tensorflow.keras.models import load_mODEL

# transfer_learning_rotten_fruits.py

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import MobileNetV2
import matplotlib.pyplot as plt
import os

# ============ CONFIG ============
IMG_SIZE = (224, 224)
BATCH_SIZE = 32
EPOCHS = 10
DATASET_PATH = 'dataset_split'  # Already split using splitfolders
MODEL_NAME = 'rotten_fruit_classifier.h5'
# ================================

    layers.GlobalAveragePooling2D(),
    layers.Dense(128, activation='relu'),
  
  layers.Dropout(0.3),
    layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

# Step 4: Train the Model
history = model.fit(train_ds,
                    validation_data=val_ds,
                    epochs=EPOCHS)

# Step 5: Evaluate the Model
test_loss, test_accuracy = model.evaluate(test_ds)
print(f"Test accuracy: {test_accuracy:.2f}")

# Step 6: Save the Model
model.save(MODEL_NAME)
print(f"Model saved as {MODEL_NAME}")

# Step 7: Plot Accuracy Graph
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()# Step 1: Load Data
train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    os.path.join(DATASET_PATH, 'train'),
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    label_mode='int'
)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    os.path.join(DATASET_PATH, 'val'),
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    label_mode='int'
)

test_ds = tf.keras.preprocessing.image_dataset_from_directory(
    os.path.join(DATASET_PATH, 'test'),
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    label_mode='int'
)

class_names = train_ds.class_names
num_classes = len(class_names)
print(f"Loaded classes: {class_names}")

# Step 2: Data Prefetching (optional but recommended)
AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.prefetch(buffer_size=AUTOTUNE)
test_ds = test_ds.prefetch(buffer_size=AUTOTUNE)

# Step 3: Build Transfer Learning Model
base_model = MobileNetV2(input_shape=IMG_SIZE + (3,),
                         include_top=False,
                         weights='imagenet')
base_model.trainable = False  # Freeze the base

model = models.Sequential([
    base_model,
plt.grid(True)
plt.show()
# app.py

import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image

# ====== CONFIG ======
MODEL_PATH = 'rotten_fruit_classifier.h5'
CLASS_NAMES = ['fresh_apple', 'rotten_apple', 'fresh_banana', 'rotten_banana']  # Update as per your classes
IMG_SIZE = (224, 224)
# =====================

# Load model once
@st.cache_resource
def load_model():
    model = tf.keras.models.load_model(MODEL_PATH)
    return model

model = load_model()

# Title
st.title("üçé Rotten Fruit & Vegetable Classifier")
st.write("Upload an image of a fruit or vegetable, and I'll tell you if it's fresh or rotten.")

# File uploader
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

# Prediction logic
def predict(image):
    image = image.resize(IMG_SIZE)
    img_array = tf.keras.utils.img_to_array(image)
    img_array = np.expand_dims(img_array, axis=0)  # Batch dimension
    predictions = model.predict(img_array)
    predicted_index = np.argmax(predictions[0])
    confidence = np.max(predictions[0])
    return CLASS_NAMES[predicted_index], confidence

# Display results
if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)
    
    st.write("‚è≥ Classifying...")
    label, confidence = predict(image)
    st.success(f"‚úÖ Prediction: **{label}** with {confidence*100:.2f}% confidence")
